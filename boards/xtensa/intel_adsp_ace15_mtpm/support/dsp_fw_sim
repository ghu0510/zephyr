#!/bin/sh
set -ex

# Run a prebuilt dsp_fw_sim.  This tool was designed to be run from
# its build directory, expects to have Xtensa SDK environment
# variables set that match its build environment and not whatever the
# caller might be using, and it links against libraries with a
# hard-coded path.
#
# Extract the RUNPATH from the ELF binary (which we can find easily
# because dsp_fw_sim is always run in its own directory), and turn
# that back into version and install paths we can use to reconstruct
# the correct SDK version.

# This one is just hardcoded; no easy way to extract from the binary
export XTENSA_CORE=ace10_LX7HiFi4

#
# The MTL_SIM_DIR environment variable specify the directory where
# the simulator was put, it should include the:
# 1. prebuilt simulator binary: dsp_fw_sim
# 2. The ROM flie: dsp_rom_mtl_sim.hex
# 3. The other library simulator binary, such as libgna.so or
#    intel_adsp.so, etc.
#
# If MTL_SIM_DIR is not assign, the default directory will be
# "$HOME/mtlsim".
#
if [ -z "$MTL_SIM_DIR" ]; then
    MTL_SIM_DIR="$HOME/mtlsim"
fi

XTLIBS=$(readelf -d $MTL_SIM_DIR/dsp_fw_sim  | fgrep RUNPATH \
         | sed 's/.*\[//' | sed 's/\].*//' | sed 's/:/\n/g'  \
         | fgrep '/XtDevTools/install/tools/' | head -1)
VER=$(echo $XTLIBS | sed 's/.*\/XtDevTools\/install\/tools\///' | sed 's/\/.*//')
TOOLS=$(echo $XTLIBS | sed "s/\/$VER\/.*//")

# The user may have an existing Xtensa installation.  Check there
# first before using the path from the binary.
if [ ! -z "$XTENSA_TOOLS_DIR" ]; then
    SDK=$(dirname "$XTENSA_TOOLS_DIR")
elif [ ! -z "$XTENSA_BUILDS_DIR" ]; then
    SDK=$(dirname "$XTENSA_BUILDS_DIR")
fi
if [ ! -z "$SDK" -a -e "$SDK/XtDevTools/install/tools/$VER" ]; then
    TOOLS="$SDK/XtDevTools/install/tools"
fi


# if we have a toolchain used for building Zephyr.
if [ -n "$XTENSA_TOOLCHAIN_PATH"  -a -e "$XTENSA_TOOLCHAIN_PATH/$VER" ]; then
    TOOLS=$XTENSA_TOOLCHAIN_PATH
fi

export XTENSA_TOOLS_VERSION="$VER"
export XTENSA_BUILDS_DIR=$(dirname "$TOOLS")/builds

if [ "$VER"x = "RG-2019.12-linux"x ]; then
    # Use the initial build of simulator by default
    export LD_LIBRARY_PATH="$TOOLS/$VER/XtensaTools/lib64/iss:$LD_LIBRARY_PATH"
    export LD_LIBRARY_PATH="$TOOLS/$VER/XtensaTools/lib64:$LD_LIBRARY_PATH"

elif [ "$VER"x = "RI-2021.7-linux"x ]; then
    # When use the released binary of simulator ww31~ww34
    export LD_LIBRARY_PATH="$TOOLS/$VER/XtensaTools/lib/iss-GCC-10.2:$LD_LIBRARY_PATH"
    export LD_LIBRARY_PATH="$TOOLS/$VER/XtensaTools/lib/iss-GCC-10.2/systemc-2.3.3:$LD_LIBRARY_PATH"
else
    # For simulator version is or greater than ww36,
    # No LD_PATH is needed
    VER="RI-2021.7-linux"
    echo "Version of Simulator => ww36, no LD_PATH is needed."
fi

# Path for our matching xt-gdb, echo this to get the info back to the wrapper
echo "PREBUILT: xt-bin-path: $TOOLS/$VER/XtensaTools/bin"

cd $MTL_SIM_DIR
exec ./dsp_fw_sim "$@"
stty sane
